{
	"info": {
		"_postman_id": "ffc32481-d454-4c47-8f51-f26e3b5c5607",
		"name": "Awarex-API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "13903683"
	},
	"item": [
		{
			"name": "GOREST-Backend-APIs",
			"item": [
				{
					"name": "User Posts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"",
									"pm.test(\"Response content type is JSON\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Each post object contains the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"",
									"    responseData.forEach(post => {",
									"        pm.expect(post).to.be.an('object');",
									"        pm.expect(post).to.have.all.keys('id', 'user_id', 'title', 'body');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Title is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"    responseData.forEach(post => {",
									"        pm.expect(post.title).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"The body must be a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"    responseData.forEach(post => {",
									"        pm.expect(post.body).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Body should not be empty\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer 5d62122e774bf830b0b3bd4e1cff2f33d7d94926e62553f95c00ca72b20c3112",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/posts",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');",
									"});",
									"",
									"",
									"pm.test(\"Response body is an empty array\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.empty;",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Validate that no additional fields are present in the response\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('array').that.is.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer 5d62122e774bf830b0b3bd4e1cff2f33d7d94926e62553f95c00ca72b20c3112",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users?email=agnivesh_chaturvedi@witting-huels.test",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							],
							"query": [
								{
									"key": "email",
									"value": "agnivesh_chaturvedi@witting-huels.test"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "getUserPostDetails",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate the structure of the 'users' object\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.have.property('users').that.is.an('object');",
							"    ",
							"    Object.keys(responseData.users).forEach(function(userId) {",
							"        const user = responseData.users[userId];",
							"        pm.expect(user).to.be.an('object').that.includes.all.keys('id', 'name', 'email', 'gender', 'status');",
							"        pm.expect(user.id).to.be.a('number');",
							"        pm.expect(user.name).to.be.a('string');",
							"        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/); // Valid email format",
							"        pm.expect(user.gender).to.be.a('string');",
							"        pm.expect(user.status).to.be.a('string');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"pm.test(\"Validate that each user object contains the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.users).to.be.an('object');",
							"",
							"    Object.values(responseData.users).forEach(user => {",
							"        pm.expect(user).to.be.an('object');",
							"        pm.expect(user).to.have.all.keys('id', 'name', 'email', 'gender', 'status');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"UserPosts object has expected structure and contains posts for valid user IDs\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.userPosts).to.be.an('object');",
							"",
							"    const userPostIds = Object.keys(responseData.userPosts);",
							"    const userIds = Object.keys(responseData.users);",
							"",
							"    userPostIds.forEach(function(userId) {",
							"        pm.expect(userIds).to.include(userId, \"User ID \" + userId + \" should be a valid user ID\");",
							"        pm.expect(responseData.userPosts[userId]).to.be.an('array').that.is.not.empty;",
							"        ",
							"        responseData.userPosts[userId].forEach(function(post) {",
							"            pm.expect(post).to.include.keys('id', 'userId', 'postTitle', 'postBody', 'userName', 'userEmail', 'userGender', 'userStatus');",
							"            pm.expect(post.id).to.be.a('number');",
							"            pm.expect(post.userId).to.be.a('number');",
							"            pm.expect(post.postTitle).to.be.a('string');",
							"            pm.expect(post.postBody).to.be.a('string');",
							"            pm.expect(post.userName).to.be.a('string');",
							"            pm.expect(post.userEmail).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
							"            pm.expect(post.userGender).to.be.a('string');",
							"            pm.expect(post.userStatus).to.be.a('string');",
							"        });",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Validate email fields are in a valid format for each user\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.have.property('users').that.is.an('object');",
							"",
							"    Object.keys(responseData.users).forEach(userId => {",
							"        const user = responseData.users[userId];",
							"        pm.expect(user).to.have.property('email').that.is.a('string').and.matches(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/awarex/api/v1/userposts/getUserPostDetails",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"awarex",
						"api",
						"v1",
						"userposts",
						"getUserPostDetails"
					]
				}
			},
			"response": []
		},
		{
			"name": "create post (non existent user)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {",
							"    pm.expect(pm.response.code).to.eql(201);",
							"});",
							"",
							"",
							"pm.test(\"Response has required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.all.keys('id', 'user_id', 'title', 'body');",
							"});",
							"",
							"",
							"pm.test(\"ID and user_id should be non-negative integers\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.id).to.exist.and.to.be.a('number').and.to.be.at.least(0);",
							"    pm.expect(responseData.user_id).to.exist.and.to.be.a('number').and.to.be.at.least(0);",
							"});",
							"",
							"",
							"pm.test(\"Title and Body must be non-empty strings\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.title).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");",
							"    pm.expect(responseData.body).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Body should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"name\": \"User Test\",\r\n\"gender\": \"male\",\r\n\"email\": \"test.this5@mailinator.com\",\r\n\"title\": \"Some title\",\r\n\"body\": \"Some text\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/awarex/api/v1/userposts/create",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"awarex",
						"api",
						"v1",
						"userposts",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "create post (existing user)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 422\", function () {",
							"    pm.expect(pm.response.code).to.equal(422);",
							"});",
							"",
							"",
							"pm.test(\"Response contains a developer error message\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.developerErrorMessage).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Errors array is present in the response\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.errors).to.exist.and.to.be.an('array');",
							"});",
							"",
							"",
							"pm.test(\"Each error object in the errors array has required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.errors).to.be.an('array').that.is.not.empty;",
							"",
							"    responseData.errors.forEach(function(error) {",
							"        pm.expect(error).to.have.all.keys('field', 'message');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Error messages are in a human-readable format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.errors).to.be.an('array').that.is.not.empty;",
							"    ",
							"    responseData.errors.forEach(function(error) {",
							"        pm.expect(error.field).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Field should not be empty\");",
							"        pm.expect(error.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"name\": \"User Test\",\r\n\"gender\": \"male\",\r\n\"email\": \"agnivesh_chaturvedi@witting-huels.test\",\r\n\"title\": \"Some title 001\",\r\n\"body\": \"Some text 001\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/awarex/api/v1/userposts/create",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"awarex",
						"api",
						"v1",
						"userposts",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "create post (existing user) - with errors",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {",
							"    pm.expect(pm.response.code).to.equal(201);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.all.keys('id', 'user_id', 'title', 'body');",
							"});",
							"",
							"",
							"pm.test(\"The title must be a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.title).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"The body must be a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.body).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"User ID must be a positive integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.user_id).to.exist.and.to.be.a('number').and.to.be.above(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"name\": \"User Test\",\r\n\"gender\": \"male\",\r\n\"email\": \"test002@ekahaa.com\",\r\n\"title\": \"Some title 001\",\r\n\"body\": \"Some text 001\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/awarex/api/v1/userposts/create",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"awarex",
						"api",
						"v1",
						"userposts",
						"create"
					]
				}
			},
			"response": []
		}
	]
}